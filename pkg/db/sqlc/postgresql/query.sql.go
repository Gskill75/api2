// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDBInstance = `-- name: CreateDBInstance :one
INSERT INTO db_instances (
  customer_id, db_type, version, host, port, username, 
  status, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, customer_id, db_type, version, host, port, username, status, instance_name, created_by, created_at, updated_at, deleted_at
`

type CreateDBInstanceParams struct {
	CustomerID string
	DbType     string
	Version    pgtype.Text
	Host       pgtype.Text
	Port       pgtype.Int4
	Username   pgtype.Text
	Status     StatusEnum
	CreatedBy  string
}

func (q *Queries) CreateDBInstance(ctx context.Context, arg CreateDBInstanceParams) (DbInstance, error) {
	row := q.db.QueryRow(ctx, createDBInstance,
		arg.CustomerID,
		arg.DbType,
		arg.Version,
		arg.Host,
		arg.Port,
		arg.Username,
		arg.Status,
		arg.CreatedBy,
	)
	var i DbInstance
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DbType,
		&i.Version,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Status,
		&i.InstanceName,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createHistory = `-- name: CreateHistory :one
INSERT INTO awx_history (
  customer_id, awx_job_id, awx_template_name, awx_template_id, 
  action_type, status, instance_name, username, extra_vars, 
  awx_status, created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, customer_id, awx_job_id, awx_template_name, awx_template_id, action_type, status, instance_name, username, extra_vars, awx_status, error_message, created_by, created_at, completed_at, updated_at
`

type CreateHistoryParams struct {
	CustomerID      string
	AwxJobID        pgtype.Int8
	AwxTemplateName pgtype.Text
	AwxTemplateID   pgtype.Int4
	ActionType      ActionTypeEnum
	Status          StatusEnum
	InstanceName    string
	Username        pgtype.Text
	ExtraVars       []byte
	AwxStatus       NullAwxStatusEnum
	CreatedBy       string
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (AwxHistory, error) {
	row := q.db.QueryRow(ctx, createHistory,
		arg.CustomerID,
		arg.AwxJobID,
		arg.AwxTemplateName,
		arg.AwxTemplateID,
		arg.ActionType,
		arg.Status,
		arg.InstanceName,
		arg.Username,
		arg.ExtraVars,
		arg.AwxStatus,
		arg.CreatedBy,
	)
	var i AwxHistory
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.AwxJobID,
		&i.AwxTemplateName,
		&i.AwxTemplateID,
		&i.ActionType,
		&i.Status,
		&i.InstanceName,
		&i.Username,
		&i.ExtraVars,
		&i.AwxStatus,
		&i.ErrorMessage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHistory = `-- name: DeleteHistory :exec
DELETE FROM awx_history WHERE id = $1
`

func (q *Queries) DeleteHistory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteHistory, id)
	return err
}

const getActiveJobs = `-- name: GetActiveJobs :many
SELECT id, customer_id, awx_job_id, awx_template_name, awx_template_id, action_type, status, instance_name, username, extra_vars, awx_status, error_message, created_by, created_at, completed_at, updated_at FROM awx_history
WHERE status IN ('pending', 'running')
ORDER BY created_at DESC
`

func (q *Queries) GetActiveJobs(ctx context.Context) ([]AwxHistory, error) {
	rows, err := q.db.Query(ctx, getActiveJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AwxHistory
	for rows.Next() {
		var i AwxHistory
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.AwxJobID,
			&i.AwxTemplateName,
			&i.AwxTemplateID,
			&i.ActionType,
			&i.Status,
			&i.InstanceName,
			&i.Username,
			&i.ExtraVars,
			&i.AwxStatus,
			&i.ErrorMessage,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDBInstance = `-- name: GetDBInstance :one

SELECT id, customer_id, db_type, version, host, port, username, status, instance_name, created_by, created_at, updated_at, deleted_at FROM db_instances
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

// Database Instances Queries
func (q *Queries) GetDBInstance(ctx context.Context, id int32) (DbInstance, error) {
	row := q.db.QueryRow(ctx, getDBInstance, id)
	var i DbInstance
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DbType,
		&i.Version,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Status,
		&i.InstanceName,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDBInstanceByName = `-- name: GetDBInstanceByName :one
SELECT id, customer_id, db_type, version, host, port, username, status, instance_name, created_by, created_at, updated_at, deleted_at FROM db_instances
WHERE instance_name = $1 AND customer_id = $2 AND deleted_at IS NULL LIMIT 1
`

type GetDBInstanceByNameParams struct {
	InstanceName string
	CustomerID   string
}

func (q *Queries) GetDBInstanceByName(ctx context.Context, arg GetDBInstanceByNameParams) (DbInstance, error) {
	row := q.db.QueryRow(ctx, getDBInstanceByName, arg.InstanceName, arg.CustomerID)
	var i DbInstance
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.DbType,
		&i.Version,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Status,
		&i.InstanceName,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDBInstancesByCustomer = `-- name: GetDBInstancesByCustomer :many
SELECT id, customer_id, db_type, version, host, port, username, status, instance_name, created_by, created_at, updated_at, deleted_at FROM db_instances
WHERE customer_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetDBInstancesByCustomer(ctx context.Context, customerID string) ([]DbInstance, error) {
	rows, err := q.db.Query(ctx, getDBInstancesByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DbInstance
	for rows.Next() {
		var i DbInstance
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.DbType,
			&i.Version,
			&i.Host,
			&i.Port,
			&i.Username,
			&i.Status,
			&i.InstanceName,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDBInstancesByStatus = `-- name: GetDBInstancesByStatus :many
SELECT id, customer_id, db_type, version, host, port, username, status, instance_name, created_by, created_at, updated_at, deleted_at FROM db_instances
WHERE status = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetDBInstancesByStatus(ctx context.Context, status StatusEnum) ([]DbInstance, error) {
	rows, err := q.db.Query(ctx, getDBInstancesByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DbInstance
	for rows.Next() {
		var i DbInstance
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.DbType,
			&i.Version,
			&i.Host,
			&i.Port,
			&i.Username,
			&i.Status,
			&i.InstanceName,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistory = `-- name: GetHistory :one
SELECT id, customer_id, awx_job_id, awx_template_name, awx_template_id, action_type, status, instance_name, username, extra_vars, awx_status, error_message, created_by, created_at, completed_at, updated_at FROM awx_history
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHistory(ctx context.Context, id int32) (AwxHistory, error) {
	row := q.db.QueryRow(ctx, getHistory, id)
	var i AwxHistory
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.AwxJobID,
		&i.AwxTemplateName,
		&i.AwxTemplateID,
		&i.ActionType,
		&i.Status,
		&i.InstanceName,
		&i.Username,
		&i.ExtraVars,
		&i.AwxStatus,
		&i.ErrorMessage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHistoryByCustomer = `-- name: GetHistoryByCustomer :many
SELECT id, customer_id, awx_job_id, awx_template_name, awx_template_id, action_type, status, instance_name, username, extra_vars, awx_status, error_message, created_by, created_at, completed_at, updated_at FROM awx_history
WHERE customer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetHistoryByCustomer(ctx context.Context, customerID string) ([]AwxHistory, error) {
	rows, err := q.db.Query(ctx, getHistoryByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AwxHistory
	for rows.Next() {
		var i AwxHistory
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.AwxJobID,
			&i.AwxTemplateName,
			&i.AwxTemplateID,
			&i.ActionType,
			&i.Status,
			&i.InstanceName,
			&i.Username,
			&i.ExtraVars,
			&i.AwxStatus,
			&i.ErrorMessage,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistoryByJobID = `-- name: GetHistoryByJobID :one
SELECT id, customer_id, awx_job_id, awx_template_name, awx_template_id, action_type, status, instance_name, username, extra_vars, awx_status, error_message, created_by, created_at, completed_at, updated_at FROM awx_history
WHERE awx_job_id = $1 LIMIT 1
`

func (q *Queries) GetHistoryByJobID(ctx context.Context, awxJobID pgtype.Int8) (AwxHistory, error) {
	row := q.db.QueryRow(ctx, getHistoryByJobID, awxJobID)
	var i AwxHistory
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.AwxJobID,
		&i.AwxTemplateName,
		&i.AwxTemplateID,
		&i.ActionType,
		&i.Status,
		&i.InstanceName,
		&i.Username,
		&i.ExtraVars,
		&i.AwxStatus,
		&i.ErrorMessage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHistoryByStatus = `-- name: GetHistoryByStatus :many
SELECT id, customer_id, awx_job_id, awx_template_name, awx_template_id, action_type, status, instance_name, username, extra_vars, awx_status, error_message, created_by, created_at, completed_at, updated_at FROM awx_history
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) GetHistoryByStatus(ctx context.Context, status StatusEnum) ([]AwxHistory, error) {
	rows, err := q.db.Query(ctx, getHistoryByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AwxHistory
	for rows.Next() {
		var i AwxHistory
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.AwxJobID,
			&i.AwxTemplateName,
			&i.AwxTemplateID,
			&i.ActionType,
			&i.Status,
			&i.InstanceName,
			&i.Username,
			&i.ExtraVars,
			&i.AwxStatus,
			&i.ErrorMessage,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteDBInstance = `-- name: SoftDeleteDBInstance :exec
UPDATE db_instances 
SET deleted_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeleteDBInstance(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteDBInstance, id)
	return err
}

const updateDBInstanceDetails = `-- name: UpdateDBInstanceDetails :exec
UPDATE db_instances 
SET host = $2, port = $3, version = $4, updated_at = NOW()
WHERE id = $1
`

type UpdateDBInstanceDetailsParams struct {
	ID      int32
	Host    pgtype.Text
	Port    pgtype.Int4
	Version pgtype.Text
}

func (q *Queries) UpdateDBInstanceDetails(ctx context.Context, arg UpdateDBInstanceDetailsParams) error {
	_, err := q.db.Exec(ctx, updateDBInstanceDetails,
		arg.ID,
		arg.Host,
		arg.Port,
		arg.Version,
	)
	return err
}

const updateDBInstanceStatus = `-- name: UpdateDBInstanceStatus :exec
UPDATE db_instances 
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateDBInstanceStatusParams struct {
	ID     int32
	Status StatusEnum
}

func (q *Queries) UpdateDBInstanceStatus(ctx context.Context, arg UpdateDBInstanceStatusParams) error {
	_, err := q.db.Exec(ctx, updateDBInstanceStatus, arg.ID, arg.Status)
	return err
}

const updateHistoryByJobID = `-- name: UpdateHistoryByJobID :exec
UPDATE awx_history 
SET status = $2, awx_status = $3, updated_at = NOW()
WHERE awx_job_id = $1
`

type UpdateHistoryByJobIDParams struct {
	AwxJobID  pgtype.Int8
	Status    StatusEnum
	AwxStatus NullAwxStatusEnum
}

func (q *Queries) UpdateHistoryByJobID(ctx context.Context, arg UpdateHistoryByJobIDParams) error {
	_, err := q.db.Exec(ctx, updateHistoryByJobID, arg.AwxJobID, arg.Status, arg.AwxStatus)
	return err
}

const updateHistoryCompletion = `-- name: UpdateHistoryCompletion :exec
UPDATE awx_history 
SET status = $2, awx_status = $3, completed_at = NOW(), 
    error_message = $4, updated_at = NOW()
WHERE id = $1
`

type UpdateHistoryCompletionParams struct {
	ID           int32
	Status       StatusEnum
	AwxStatus    NullAwxStatusEnum
	ErrorMessage pgtype.Text
}

func (q *Queries) UpdateHistoryCompletion(ctx context.Context, arg UpdateHistoryCompletionParams) error {
	_, err := q.db.Exec(ctx, updateHistoryCompletion,
		arg.ID,
		arg.Status,
		arg.AwxStatus,
		arg.ErrorMessage,
	)
	return err
}

const updateHistoryStatus = `-- name: UpdateHistoryStatus :exec
UPDATE awx_history 
SET status = $2, awx_status = $3, updated_at = NOW()
WHERE id = $1
`

type UpdateHistoryStatusParams struct {
	ID        int32
	Status    StatusEnum
	AwxStatus NullAwxStatusEnum
}

func (q *Queries) UpdateHistoryStatus(ctx context.Context, arg UpdateHistoryStatusParams) error {
	_, err := q.db.Exec(ctx, updateHistoryStatus, arg.ID, arg.Status, arg.AwxStatus)
	return err
}
