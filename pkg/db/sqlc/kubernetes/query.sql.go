// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package kubernetesdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHistory = `-- name: CreateHistory :one
INSERT INTO kubernetes_history (
  customer_id, action_type, status, namespace_name, username, created_by, details, error_message
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, customer_id, action_type, status, namespace_name, username, error_message, created_by, created_at, completed_at, updated_at, details
`

type CreateHistoryParams struct {
	CustomerID    string
	ActionType    KubernetesActionTypeEnum
	Status        KubernetesStatusEnum
	NamespaceName string
	Username      string
	CreatedBy     string
	Details       pgtype.Text
	ErrorMessage  pgtype.Text
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (KubernetesHistory, error) {
	row := q.db.QueryRow(ctx, createHistory,
		arg.CustomerID,
		arg.ActionType,
		arg.Status,
		arg.NamespaceName,
		arg.Username,
		arg.CreatedBy,
		arg.Details,
		arg.ErrorMessage,
	)
	var i KubernetesHistory
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ActionType,
		&i.Status,
		&i.NamespaceName,
		&i.Username,
		&i.ErrorMessage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.UpdatedAt,
		&i.Details,
	)
	return i, err
}

const deleteNamespace = `-- name: DeleteNamespace :one
DELETE FROM namespaces
WHERE name = $1 AND customer_id = $2
RETURNING name, customer_id
`

type DeleteNamespaceParams struct {
	Name       string
	CustomerID string
}

type DeleteNamespaceRow struct {
	Name       string
	CustomerID string
}

func (q *Queries) DeleteNamespace(ctx context.Context, arg DeleteNamespaceParams) (DeleteNamespaceRow, error) {
	row := q.db.QueryRow(ctx, deleteNamespace, arg.Name, arg.CustomerID)
	var i DeleteNamespaceRow
	err := row.Scan(&i.Name, &i.CustomerID)
	return i, err
}

const getHistoryByCustomer = `-- name: GetHistoryByCustomer :many
SELECT id, customer_id, action_type, status, namespace_name, username, error_message, created_by, created_at, completed_at, updated_at, details FROM kubernetes_history
WHERE customer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetHistoryByCustomer(ctx context.Context, customerID string) ([]KubernetesHistory, error) {
	rows, err := q.db.Query(ctx, getHistoryByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KubernetesHistory
	for rows.Next() {
		var i KubernetesHistory
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.ActionType,
			&i.Status,
			&i.NamespaceName,
			&i.Username,
			&i.ErrorMessage,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.UpdatedAt,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNamespace = `-- name: GetNamespace :one
SELECT id, name, customer_id, created_by, created_at, updated_at FROM namespaces WHERE name = $1 AND customer_id = $2
`

type GetNamespaceParams struct {
	Name       string
	CustomerID string
}

func (q *Queries) GetNamespace(ctx context.Context, arg GetNamespaceParams) (Namespace, error) {
	row := q.db.QueryRow(ctx, getNamespace, arg.Name, arg.CustomerID)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CustomerID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNamespaceByCustomer = `-- name: GetNamespaceByCustomer :many
SELECT id, name, customer_id, created_by, created_at, updated_at FROM namespaces WHERE customer_id = $1
`

func (q *Queries) GetNamespaceByCustomer(ctx context.Context, customerID string) ([]Namespace, error) {
	rows, err := q.db.Query(ctx, getNamespaceByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Namespace
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CustomerID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNamespace = `-- name: InsertNamespace :exec
INSERT INTO namespaces (
    name,
    customer_id,
    created_by
) VALUES (
    $1, $2, $3
)
`

type InsertNamespaceParams struct {
	Name       string
	CustomerID string
	CreatedBy  string
}

func (q *Queries) InsertNamespace(ctx context.Context, arg InsertNamespaceParams) error {
	_, err := q.db.Exec(ctx, insertNamespace, arg.Name, arg.CustomerID, arg.CreatedBy)
	return err
}

const listNamespacesByCustomerID = `-- name: ListNamespacesByCustomerID :many
SELECT id, name, customer_id, created_by, created_at, updated_at FROM namespaces WHERE customer_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListNamespacesByCustomerID(ctx context.Context, customerID string) ([]Namespace, error) {
	rows, err := q.db.Query(ctx, listNamespacesByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Namespace
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CustomerID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
